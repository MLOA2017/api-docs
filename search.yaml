###############################################################################
##                                                                           ##
##                                 SEARCH API                                ##
##                                                                           ##
##                     (c) Airbus Defense and Space Geo                      ##
##                                                                           ##
##                                                                           ##
##                    Contact: frederic.bages@airbus.com                     ##
##                                                                           ##
###############################################################################

info:
  title: Airbus Defense and Space Geo - Search API
  description: |
    This document describes Airbus Defense and Space Geo Search API. The Search API can be used to query the products available for ordering through the [Order API](https://airbusgeo.github.io/geoapi-viewer/?url=https://airbusgeo.github.io/api-docs/order.yaml). 
    
    __ALPHA version subject to change__
    
    __IMPORTANT -__ best practices when implementing clients:
    * Your clients should not rely on properties that are not documented in this specification as such properties could be changed or removed without notice.
    * Your clients should not assume that the properties described in this specifications are the only ones that will be returned by the API. Not documented or additional properties will be returned in future version of this API without notification. 
    * Your clients should not rely on or map properties that are not usefull to them. Doing so will ensure that your clients are not impacted by API changes on properties that are not usefull to them.
    
    __DEPRECATION -__ The following changes will be included in final 1.0 specification:

    __VERSION LOG -__ 
    
    1.0-alpha1
    
    * Initial version
    
    __STANDARD RULES -__ The following rules apply to attributes format when specifyed.
    
    Intervals for numerical values and dates are specified using the standard straights brackets.
    * [n1,n2] equal to n1 <= field <= n2
    * [n1,n2[ equals to n1 <= field < n2
    * ]n1,n2[ equals to n1 < field < n2
    * ]n1,n2] equal to n1 < field <= n2
    * [n1 equals to n1<= field
    * ]n1 equals to n1 < field
    * n1] equals to field <= n1
    * n1[ equals to field < n1
    
  version: '1.0-alpha1'

###############################################################################
##                                                                           ##
##                           GENERAL CONFIGuRATION                           ##
##                                                                           ##
###############################################################################

consumes:
  - application/json

produces:
  - application/json

schemes:
  - http

host: search-qual.geoapi-airbusds.com

securityDefinitions:
  api_key:
    description: A recognised anthentication API key for a named system user.
    in: header
    name: Authorization
    type: apiKey
  param_key:
    description: A recognised anthentication bearer token for a named system user.
    in: query
    name: apiKey
    type: apiKey
swagger: '2.0'

###############################################################################
##                                                                           ##
##                           OBJECTS DOCUMENTATION                           ##
##                                                                           ##
###############################################################################

definitions:

  # NOTE: Common definitions are located at https://airbusgeo.github.io/api-docs/definitions.yaml 


  SearchResult: # NOTE: This is an OpenSearch and FeatureCollection compliant object.
    description: 'OpenSearch response object in JSon format. it is also a GeoJSON FeatureCollection object.'
    type: object
    properties:
      totalResults: 
        description: The number of search results available for the current search.
        type: integer
      startIndex:
        description: The index of the first search result in the current set of search results.
        type: integer
      itemsPerPage: 
        description: The number of search results returned per page.
        type: integer
      query:
        $ref: '#/definitions/OpenSearch Query'
      type:
        description: the result item type (always equals to "FeatureCollection")
        type: string
        enum: [ "FeatureCollection" ]
      features:
        description: the array of matching images as GeoJSON feature objects.
        type: array
        items:
          $ref: '#/definitions/GeoJSON Feature'
      
  OpenSearch Query:
      description: 'Query that can be used to recreate the search request that generated the current search response. <b>WARNING:</b> This object will be changed in final version.'
      type: object
      properties:
        constellation: #TODO change type ?
          description: 'The satellite filter used ex: { Pleiades, SPOT 6/7 }.'
          type: string 
        sortKeys: #TODO change type ?
          description: 'The sort order used for the response ex: constellation,1 acquisitionDate,0'
          type: string
        count: #TODO change name and type ?
          description: The number of search results returned per page.
          type: string
        geometry: #TODO change name and type ?
          description: the bounding box used for filtering images as a GeoJSON polygon.
          type: string
        # xuid: # What is this properties used for ?
        pw: #TODO change name and type ?
          description: The page number
          type: string
      
  GeoJSON Feature:
    description: GeoJSON feature object.
    externalDocs: 
      description: GeoJSON feature object specification.
      url: 'http://geojson.org/geojson-spec.html#feature-objects'
    type: object
    properties:
      id:
        description: The image OneAtlas internal identifier.
        type: string
      properties: 
         $ref: '#/definitions/GeoJSON Feature Properties'
      geometry:
         $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/GeoJSON Geometry'
      type:
        description: The feature type (always equals to "Feature")
        type: string
        enum: [ "Feature" ]
    
  GeoJSON Feature Properties:
    description: GeoJSON feature properties object
    type: object
    properties: # TODO: Described for image search. Ensure that it is always the same or change the YAML name.
      constellation:
        $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/constellation'
      wmtsUrl: 
        description: Image url link with place holders for the zoom level {z}, the tile x {x} and y {y} coordinates.
        type: string
        format: url
      satellite:
        description: 'The satellite used to acquire the image.'
        example: 'SPOT6, PHR1B...'
        type: string
      acquisitionDate:
        $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/acquisitionDate'
      incidenceAngle:
        $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/incidenceAngle'
      bbox:
        $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/bbox'
      cloudCover:
        $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/cloudCover'

    
  searchRequest:
    description: A product search request.
    type: object
    properties:
      bbox:
        description: "A bounding box array string in geographic coordinate reference system (WGS84). Example: -10.0, -10.0, 10.0, 10.0 or -180, -90, 180, 90 for whole world in Geographic."
        type: string
      geometry:
        description: "A POLYGON geometry describing the AOI in the Well-known text format. Example: POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
        type: string
        format: WKT Geometric objects
      sensorType:
        description: "The sensor type used for capturing the product."
        type: string
        enum:
        - optical
        - radar
        - terrain
      acquisitionDate:
        description: "A date or date interval that must match the product acquisition date. Only products in this range are returned in the response. Example: [2017-01-01,2017-02-01[ to select all products acquired in January 2017. "
        type: string
        format: Interval of dates in ISO 8601
      resolution:
        description: "A number or number range that must match the product resolution in meter. Only products in this range are returned in the response. example: 1.5] to select all products with a resolution inferior or equal to 1.5 meter."
        type: string
        format: Interval of resolution in meter
      incidenceAngle:
        description: "A number or number range that must match the product incidence angle in degrees. Only products in this range are returned in the response. example: 30] to select all products with an incidence angle inferior or equal to 30 degrees."
        type: string
        format: Interval of incidence angle in degrees
      cloudCover:
        description: "A number or number range that must match the product cloud coverage in percentage (min 0%, max 100%). Only products in this range are returned in the response. example: 10[ to select all products with a cloud coverage less than 10 percent."
        type: string
        format: Interval of cloud coverage in percent
      snowCover:
        description: "A number or number range that must match the product snow coverage in percentage (min 0%, max 100%). Only products in this range are returned in the response. example: [50,90] to select all products with a partial snow coverage of at least 50 percent but no more than 90 percent."
        type: string
        format: Interval of cloud coverage in percent
      constellation:
        description: "The constellation of satelittes used to acquire the product. Setting a constellation is identical as setting all the product types generated by the given satellite constellation. __WARNING__: Mixing constellation and productType parameters result in an unspecified filter."
        type: string
        enum: [ "Pleiades", "SPOT", "TerraSAR-X Mission" ]
      productType:
        description: "A list of product types used as a filter. Only products of one of these types will be returned in the response."
        type: array
        items:
          $ref: 'https://airbusgeo.github.io/api-docs/definitions.yaml#/definitions/productType'
      polarisationChannels:
        description: "The polarization channels used by the sensor during the product acquisition. Only products acquired with one of the listed polarisation channel will be returned in the response."
        type: array
        items:
          type: string
          enum:
          - HH
          - VV
          - HH,HV
          - HH,VV
          - VV,VH
      orbitDirection:
        description: "The satellite orbit direction during the product acquisition. Only products acquired on the specified orbit direction will be returned in the response."
        type: string
        enum:
        - ASCENDING
        - DESCENDING
      antennaLookDirection:
        description: "The antenna look direction during the product acquisition. Only products acquired with the antenna looking in the specified direction will be returned in the response."
        type: string
        enum:
        - LEFT
        - RIGTH
        # OpenQuery
      count:
        description: Number of items per page
        type: integer
        default: 10
      startPage:
        description: Page number
        type: integer
        default: 1
      sortKeys:
        description: "A sorting request to the server conforming the OpenSearch SRU specification. Example: sortKeys=acquisitionDate,,0 cloudCover,,1 meaning a request to sort first by newest acquired image first and then by then smallest cloud coverage percentage."
        type: string
        format: OpenSearch SRU

        
###############################################################################
##                                                                           ##
##                         END POINTS DOCUMENTATION                          ##
##                                                                           ##
###############################################################################

paths:

  /api/v1/search:
    get:
      summary: Search for images.
      description: |
        Query the catalog for relevant products in a given
        aera of interest (AOI). The returned object is an OpenSearch and GeoJSON FeatureCollection 
        compliant object.
        
        The AOI can be sent using either the bbox parameter or the geometry parameter.
        
        __WARNING__: Due to technical limitations in web browsers, proxies and web servers the GET method may not work with complex AOI geometries. If you are unsure of the maximum number of vertices of the AOI polygon you may use, please prefer the POST method with a JSon body instead.
      security:
        - api_key: []
        - param_key: []
      parameters:
        - description: "A bounding box array string in geographic coordinate reference system (WGS84). Example: -10.0, -10.0, 10.0, 10.0 or -180, -90, 180, 90 for whole world in Geographic."
          in: query
          name: bbox
          required: false
          type: string
        - description: "A POLYGON geometry describing the AOI in the Well-known text format. Example: POLYGON ((30 10, 40 40, 20 40, 10 20, 30 10))"
          in: query
          name: geometry
          required: false
          type: string 
          format: WKT Geometric objects
        - description: "The sensor type used for capturing the product."
          in: query
          name: sensorType
          required: true
          type: string
          enum:
          - optical
          - radar
          - terrain
        - description: "A date or date interval that must match the product acquisition date. Only products in this range are returned in the response. Example: [2017-01-01,2017-02-01[ to select all products acquired in January 2017. "
          in: query
          name: acquisitionDate
          required: false
          type: string 
          format: Interval of dates in ISO 8601
        - description: "A number or number range that must match the product resolution in meter. Only products in this range are returned in the response. example: 1.5] to select all products with a resolution inferior or equal to 1.5 meter."
          in: query
          name: resolution
          required: false
          type: string 
          format: Interval of resolution in meter
        - description: "A number or number range that must match the product incidence angle in degrees. Only products in this range are returned in the response. example: 30] to select all products with an incidence angle inferior or equal to 30 degrees."
          in: query
          name: incidenceAngle
          required: false
          type: string 
          format: Interval of incidence angle in degrees
        - description: "A number or number range that must match the product cloud coverage in percentage (min 0%, max 100%). Only products in this range are returned in the response. example: 10[ to select all products with a cloud coverage less than 10 percent."
          in: query
          name: cloudCover
          required: false
          type: string 
          format: Interval of cloud coverage in percent
        - description: "A number or number range that must match the product snow coverage in percentage (min 0%, max 100%). Only products in this range are returned in the response. example: [50,90] to select all products with a partial snow coverage of at least 50 percent but no more than 90 percent."
          in: query
          name: snowCover
          required: false
          type: string 
          format: Interval of cloud coverage in percent
        - description: "The constellation of satelittes used to acquire the product. Setting a constellation is identical as setting all the product types generated by the given satellite constellation. __WARNING__: Mixing constellation and productType parameters result in an unspecified filter."
          in: query
          name: constellation
          required: false
          type: string
          enum: [ "Pleiades", "SPOT", "TerraSAR-X Mission" ]
        - description: "A list of product types used as a filter. Only products of one of these types will be returned in the response."
          in: query
          name: productType
          required: false
          type: array 
          items:
            type: string
            enum:
            - "Pléiades 0.5-m"
            - "Pléiades 0.5-m - STEREO"
            - "Pléiades 0.5-m – TRISTEREO"
            - "SPOT 1.5-m"
            - "SPOT 1.5-m - STEREO"
            - "SPOT 1.5-m - TRISTEREO"
            - "SPOT 2.5-m B&W"
            - "SPOT 2.5-m Color"
            - "SPOT 5-m B&W"
            - "SPOT 5-m Color"
            - "SPOT 10-m B&W"
            - "SPOT 10-m Color"
            - "SPOT 20-m Color"
            - "High Resolution SpotLight (HS)"
            - "ScanSAR (SC)"
            - "SpotLight (SL)"
            - "Staring SpotLight (ST)"
            - "StripMap (SM)"
            - "Wide ScanSAR (WS)"
            - "WorldDEM"
            - "WorldDEM core"
            - "WorldDEM DTM"
          collectionFormat: csv
        - description: "The polarization channels used by the sensor during the product acquisition. Only products acquired with one of the listed polarisation channel will be returned in the response."
          in: query
          name: polarisationChannels
          required: false
          type: array
          items:
            type: string
            enum: 
            - HH
            - VV
            - HH,HV
            - HH,VV
            - VV,VH
          collectionFormat: csv
        - description: "The satellite orbit direction during the product acquisition. Only products acquired on the specified orbit direction will be returned in the response."
          in: query
          name: orbitDirection
          required: false
          type: string
          enum: 
          - ASCENDING
          - DESCENDING
        - description: "The antenna look direction during the product acquisition. Only products acquired with the antenna looking in the specified direction will be returned in the response."
          in: query
          name: antennaLookDirection
          required: false
          type: string
          enum:
          - LEFT
          - RIGTH

        # OpenQuery
        - description: Number of items per page
          in: query
          name: count
          required: false
          type: integer
          default: 10
        - description: Page number
          in: query
          name: startPage
          required: false
          type: integer
          default: 1
        - description: "A sorting request to the server conforming the OpenSearch SRU specification. Example: sortKeys=acquisitionDate,,0 cloudCover,,1 meaning a request to sort first by newest acquired image first and then by then smallest cloud coverage percentage."
          in: query
          name: sortKeys
          required: false
          type: string 
          format: OpenSearch SRU
          
          
      responses:
        '200':
          description: Request successful # - all results returned
          schema:
            $ref: '#/definitions/SearchResult'
        #'206': # TODO: Currently not implemented ?
        #  description: Request successful - partial results returned
        '401':
          description: 'Unauthorized: the authorization is missing or has expired.'
        '400':
          description: 'The request is not correct. This can happen if both bbox and geometry are present.'
      tags:
        - Search

    post:
      summary: Search for images.
      description: |
        Same as the GET version but without limitation on AOI complexity and parameters sent using JSon format.
      security:
        - api_key: []
        - param_key: []
      parameters:
        - description: The search request.
          name: searchRequest
          in: body
          required: true
          schema:
            $ref: '#/definitions/searchRequest'
      responses:
        '200':
          description: Request successful # - all results returned
          schema:
            $ref: '#/definitions/SearchResult'
        #'206': # TODO: Currently not implemented ?
        #  description: Request successful - partial results returned
        '401':
          description: 'Unauthorized: the authorization is missing or has expired.'
        '400':
          description: 'The request is not correct. This can happen if both bbox and geometry are present.'
      tags:
        - Search


        